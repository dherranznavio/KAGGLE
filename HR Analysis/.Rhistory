df4
dx <- data.frame(Name = Name, Age = Age)
dx
atr <- matrix(1:20, ncol = 5) # Example matrix
View(atr)
df <- as.data.frame(matr)
df <- as.data.frame(atr)
colnames(df) <- paste("variable_", 1:ncol(df))
rownames(df) <- paste("id_", 1:nrow(df))
dfmatrix(data)
df(data)
matr <- matrix(1:20, ncol = 5) # Example matrix
df <- as.data.frame(matr)
colnames(df) <- paste("variable_", 1:ncol(df))
rownames(df) <- paste("id_", 1:nrow(df))
df
class(VADeaths)
is.data.frame(VADeaths)
is.data.frame(VADeaths)
str(VADeaths)
dfVADeaths <- as.data.frame(VADeaths)
str(VADeaths)
str(Iris)
str(iris)
dfVADeaths$Total <- dfVADeaths$`Rural Male` + dfVADeaths$`Rural Female`
+ dfVADeaths$`Urban Male` + dfVADeaths$`Urban Female`
view(dfVADeaths)
View(dfVADeaths)
View(dfVADeaths)
dfVADeaths$Total <- dfVADeaths$`Rural Male` + dfVADeaths$`Rural Female` + dfVADeaths$`Urban Male` + dfVADeaths$`Urban Female`
View(dfVADeaths)
View(dfVADeaths)
dfVADeaths$Total <- dfVADeaths$`Rural Male` + dfVADeaths$`Rural Female`
dfVADeaths$Total <- dfVADeaths$`Rural Male` + dfVADeaths$`Rural Female`
+ dfVADeaths$`Urban Male` + dfVADeaths$`Urban Female`
dfVADeaths$Total <- dfVADeaths$`Rural Male` + dfVADeaths$`Rural Female` + dfVADeaths$`Urban Male` + dfVADeaths$`Urban Female`
View(df)
class (state.x77)
df <- as.data.frame(state.x77)
head(df)
count(df$Income)
df[df$Income< 4300,]
count(df[df$Income< 4300,])
summarize(df[df$Income< 4300,])
summary(df[df$Income< 4300,])
fivenum(df[df$Income< 4300,])
nrow(df[df$Income< 4300,])
nrow(df[df$Income< 4300,])
nrow(subset(df, df$Income > 4300))
nrow(subset(df, df$Income < 4300))
df[df$Income == max(df$Income) ,]
swiss
colnames(swiss)
class(swiss)
df <- swiss[c(1,2,3,10,11,12,13),]
table(df)
dim(df)
df
df <- swiss[c(1:3,10:13),c("Examination", "Education", "Infant.Mortality")]
df[4,3] <- NA
df$total
df$total <- rowsums(df[1:3], na.rm = T)
df$total <- rowsums(df[1:3], na.rm = T)
df$total <- rowSums(df[1:3], na.rm = T)
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
df <- swiss[c(1:3,10:13),c("Examination", "Education", "Infant.Mortality")]
dim(df)
# a) The infant mortality of Sarine is wrong, it should be a NA, change it.
df[4,3] <- NA
# b) Create a row that will be the total sum of the column, name it Total.
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
df <- swiss[c(1:3,10:13)]
df <- swiss[c(1:3,10:13),]
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
class(swiss)
df <- swiss[c(1:3,10:13),c("Examination", "Education", "Infant.Mortality")]
dim(df)
# a) The infant mortality of Sarine is wrong, it should be a NA, change it.
df[4,3] <- NA
# b) Create a row that will be the total sum of the column, name it Total.
df["Total",] <- c(sum(df$Examination), sum(df$Education), sum(df$Infant.Mortality, na.rm = TRUE))
df <- data.frame(state.abb, state.area, state.division, state.region, row.names = state.name)
names(df)
df
ames(df) <- substr(names(df), 7, 9)
names(df) <- substr(names(df), 7, 9)
df
dfa <- cbind(state.x77, df)
dfa$div <- NULL
dfa
dfa <- subset(dfa, ,-c(4, 6, 7, 9, 10))
dfa$illi <- ifelse(dfa$Illiteracy < 1,
"Low Illiteracy",
ifelse(dfa$Illiteracy >= 1 & dfa$Illiteracy < 2,
"Some Illiteracy",
"High Illiteracy"))
library(rvest)
library(xml2)
library(rvest)
library(reshape2)   #manipular datas
library(ggplot2)
library(zoo)        # para series temporales
install.packages("zoo")
install.packages("tseries")
library(zoo)        # para series temporales
library(tseries)    # utlidades para series temporales.
foo  <- function( simbolo, final = Sys.time(), profundidad = 30 * 24 * 3600 ){
precios <- get.hist.quote(instrument= simbolo, start = final - profundidad,
end = final, quote=c("AdjClose"),
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
colnames(precios) <- simbolo
return(precios)
}
# Vamos a _scrapear_ una página de Yahoo para descargar los símbolos (abreviaturas
# de los nombres de las acciones) de los valores de IBEX.
tmp <- read_html("http://finance.yahoo.com/q/cp?s=%5EIBEX+Components")
tmp <- html_nodes(tmp, "table")
tmp <- html_table(tmp[[9]])
simbolos <- tmp$Symbol
ibex <- do.call(merge, sapply(simbolos, foo, simplify = F))
?merge.zoo
class(ibex)
head(zoo)
head(ibex)
ibex
ibex.scaled <- scale(ibex) # resto la media y lo divido por la desviación estándar
ibex.df <- data.frame(ibex.scaled, fecha = index(ibex.scaled))
ibex.df <- melt(ibex.df, id.vars = "fecha")
ibex.df <- ibex.df[ order(ibex.df$fecha, ibex.df$variable), ]
ibex.df$cluster <- kmeans(data.frame(t(ibex.scaled)), 4)$cluster
ggplot(ibex.df, aes(x=fecha, y=value, group=variable)) +
geom_line() + facet_wrap(~cluster)
ibex.df$cluster
plot(ibex[,1:4])
head(ibex)
plot(ibex[,1:4], plot.type = "single")
plot(diff(ibex[,1:4]))
plot(rollapply(ibex, 10, sd)[,1:4])
start(ibex)
end(ibex)
window(ibex, start = Sys.Date() - 7, end = Sys.Date())
library(xts)
install.packages("xts")
ibex.test <- data.frame(ibex.scaled)
View(ibex.test)
summary(mi.iris)
mi.iris <- iris
mi.iris$cutoff <- length(mi.iris$Species) / 2
mi.iris$indices <-  sample(1:length(mi.iris$Species), length(mi.iris$Species))
mi.iris <-  mi.iris[mi.iris$indicies < mi.iris$cutoff,]
dim(mi.iris)
summary(mi.iris)
mi.iris3 <-  ddply(iris, .(Species), transform, cutoff =round(length(Species)/ 4))
mi.iris3 <-  ddply(mi.iris3, .(Species), transform, indices = sample(1:length(Species), length(Species)))
quijote <- readLines("http://www.gutenberg.org/cache/epub/2000/pg2000.txt")
quijote
install.packages("revealjs")
sample(1:100,1000, replace = FALSE)
mean(sample(1:1000,100, replace = FALSE))
mean(sample(1:1000,100, replace = FALSE))
sample(1:1000,100, replace = FALSE) %in% A
sample(1:1000,100, replace = FALSE) %in% a
a <- sample(1:1000,100, replace = FALSE)
sample(1:1000,100, replace = FALSE) %in% a
sum(sample(1:1000,100, replace = FALSE) %in% a)
replicate (10000, fun)
fun <-  function {
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
}
fun <-  function
{
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
}
fun <-  function ()
{
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
}
replicate (10000, fun)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
a <- sample(1:1000,100, replace = FALSE)
sum(sample(1:1000,100, replace = FALSE) %in% a)
fun()
replicate (10000, fun())
mean(replicate (10000, fun()))
res <- replicate (10000, fun())
hist(res)
res <- replicate (1000000, fun())
hist(res)
res <-  replicate(10000,
{ a <- sample(1:n,m)
b <- sample(1:n,m)
length(intersect(a,b))})
res <- replicate(10000, sum(sample(1:n,100) <= 100))
n <- 1000
m <- 100
res <- replicate(10000, sum(sample(1:n,100) <= 100))
res <-  replicate(10000,
{ a <- sample(1:n,m)
b <- sample(1:n,m)
length(intersect(a,b))})
p=0.5
rbinom(1,1,p)
rbinom(1,1,p)
rbinom(5,1,p)
hist(rbinom(5,1,p))
mean(replicte(10000, rbinom(5,1,p)))
mean(replicate(10000, rbinom(5,1,p)))
mean(replicate(10000, rbinom(1,1,p)))
bino <- replicate(10000, rbinom(1,1,p))
hist(bino)
p=0.2
bino <- replicate(10000, rbinom(1,1,p))
mean(bino)
st(bino)
estimate.mean <- function(n, p= 0.5) mean(rbinom(n,1,p))
estimate.mean(10000, p = 0.6)
res <-  replicate(1000, estimate.mean(100000, p= 0.6))
estimate.var <- function(n, p= 0.5) var(rbinom(n,1,p))
estimate.var(10000, p = 0.6)
res <-  replicate(1000, estimate.var(100000, p= 0.6))
pes <- seq(0,1, by = 0.01)
res <- sapply(pes, function(p) estimate.var(1e4, p))
plot(pes,res, type = "l")
res <- sapply(pes, function(p) estimate.var(1e8, p))
plot(pes,res, type = "l")
ppois(75, 60)
qpois(75, 60)
hist(rpois(1e5,60))
qpois(75, 60)
qpois(0,99, 60)
qpois(0.99, 60)  #cuantiles,  1 año de cada 100 años verías 75 coss
salticos <-  rnorm(1000)
plot(cumsum(salticos))
plot(cumsum(salticos), type = "l")
rt(1000,r)
?RT
??rt
rt(1000,5)
hist(rt(1000,5))
hist(rt(100000,5))
plot(rt(100000,5))
plot(rt(100000,5), type = "l")
plot(rt(1000,5), type = "l")
plot(rt(100,5), type = "l")
plot(cumsum(rt(100,5), type = "l"))
plot(cumsum(rt(100,5)), type = "l")
curve(dcauchy, 5, -5)
num.sin <- ppois(1, 3000)  #intenisad 3000 eventos al mes
econ <-  sum(exp(rnorm(num.sin , 3, 4)))
res <- replicate(1000,foo)
hist(res)
res <- replicate(10000,foo)
class(res)
hist(res,)
hist(res, breaks = 100)
num.sin <- rpois(1, 3000)  #intenisad 3000 eventos al mes
foo <-  function () {
num.sin <- rpois(1, 3000)  #intenisad 3000 eventos al mes
econ <-  sum(exp(rnorm(num.sin , 3, 4)))
}
res <- replicate(10000,foo)
class(res)
hist(res, breaks = 100)
foo <-  function () {
n <- rpois(1, 3000)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo)
class(res)
hist(res, breaks = 100)
foo <-  function () {
n <- rpois(1, 3000)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo())
class(res)
hist(res, breaks = 100)
foo <-  function (t) {
n <- rpois(1, 3000*t)  #intenisad 3000 eventos al mes
sum(exp(rnorm(n , 3, 4)))
}
res <- replicate(10000,foo(1))
class(res)
hist(res, breaks = 100)
hist(rnorm(1000,2,3))
hist(rnorm(1000000,2,3))
res <-  sapply(1000:10000, function(x)
sum(sample(1:x,100) <= 100)
)
plot(1000:10000,res)
boxplot(res, 1000:10000)
res <-  sapply(1000:10000, function(x)
sum(sample(1:x,100) <= 100)
)
boxplot(res, 1000:10000)
boxplot(1000:10000 ~ res)
res
sample(1,20)
sample(1:10,20)
sum(sample(1:1000,100) <= 100)
sample(1:1000,100)
sample(1:1000,100) <= 100
sum(sample(1:1000,10) <= 100)
sample(1:1000,10)
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
set.seed(1234)
N.A <- rpois(1, 10000) # Grupo A
N.B <- rpois(1, 10000)
p.a <- 0.02
p.b <- 0.025
n.a <- rbinom(1, N.A, p.a)
n.b <- rbinom(1, N.B, p.b)
# test de hipótesis "frecuentista":
prop.test(c(n.a, n.b), c(N.A, N.B))
# test de hipótesis basado en remuestreos (cambios de etiquetas):
# con este test de etiquetas simulo que no hay efecto.
diferencia.props.real <- n.b / N.B - n.a / N.A
mascara    <- rep(c("a", "b"), times = c(N.A, N.B))
resultados <- rep(0, length(mascara))
resultados[1:(n.a + n.b)] <- 1
res <- replicate(10000, tapply(sample(resultados), mascara, mean))
res <- t(res)
hist(res[,2] - res[,1], col = "gray")
abline(v = diferencia.props.real, col = "red")
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
res <- as.data.frame(fit)
library(ggplot2)
library(rstan)
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
res <- as.data.frame(fit)
res$delta <- res$pb - res$pa
hist(res$delta, col = "gray", breaks = 30)
library(ggplot2)
library(rstan)
install.packages('rstudioapi')
library(rstudioapi)
rtools <- "C:\\Rtools\\bin"
gcc <- "C:\\Rtools\\gcc-4.6.3\\bin"
path <- strsplit(Sys.getenv("PATH"), ";")[[1]]
new_path <- c(rtools, gcc, path)
new_path <- new_path[!duplicated(tolower(new_path))]
Sys.setenv(PATH = paste(new_path, collapse = ";"))
stanmodelcode <- '
data {
int A;
int B;
int a;
int b;
}
parameters {
real<lower=0, upper = 1> pa;
real<lower=0, upper = 1> pb;
}
model {
// priori no informativa
pa ~ beta(1,1);
pb ~ beta(1,1);
// verosimilitud
a ~ binomial(A, pa);
b ~ binomial(B, pb);
}
'
fit <- stan(model_code = stanmodelcode,
data = list(A = N.A, B = N.B, a = n.a, b = n.b),
iter = 12000, warmup = 2000,
chains = 4, thin = 10)
length(iris[[1]])
length(iris[[1]])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: body
library(data.table)
library(plyr)
sample_list <- function(list){
mascara <- sample(length(list[[1]]))
list(model.data=list[mascara>list$cutoff,], model.subdata=list[mascara<=list$cutoff,])
}
extract_subset <- function(data, group_by, ratio){
datatable <- data.table(data, key=group_by)
datatable <- datatable[,cutoff:= .N*ratio, by=group_by]
datatable.split <- dlply(datatable, group_by, sample_list)
list(main_set = ldply(datatable.split, function(x){x[[1]]}),
subbset = ldply(datatable.split, function(x){x[[2]]}))
}
data_model <- extract_subset(iris, 'Species', 0.3)
str(data_model,2)
# Chunk 3: original
length(iris[[1]])
library(rstan)
rm(list=ls())
---
```{r}
install.packages("tidyverse")
install.packages("rpart")
install.packages("needs")
install.packages("lattice")
install.packages("caret")
install.packages("pROC")
install.packages("ipred")
install.packages("e1071")
install.packages("corrplot")
install.packages("ggplot2")
install.packages("dplyr")
setwd("D:/Kaggle/R")
